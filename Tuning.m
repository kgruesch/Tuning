%analyze
clear all;


%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\test\Documents\UpRev_Log2-22-2017_7-45-14_AM.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/05/22 18:04:33

%% Initialize variables.
filename = 'C:\Users\test\Documents\UpRev_Log6-23-2017_8-11-49_PM.csv'; %copy log file path here
delimiter = ',';
startRow = 2;

MAF = [0.08
0.16
0.23
0.31
0.39
0.47
0.55
0.63
0.7
0.78
0.86
0.94
1.02
1.09
1.17
1.25
1.33
1.41
1.48
1.56
1.64
1.72
1.8
1.88
1.95
2.03
2.11
2.19
2.27
2.34
2.42
2.5
2.58
2.66
2.73
2.81
2.89
2.97
3.05
3.13
3.2
3.28
3.36
3.44
3.52
3.59
3.67
3.75
3.83
3.91
3.98
4.06
4.14
4.22
4.3
4.38
4.45
4.53
4.61
4.69
4.77
4.84
4.92
5];

fcomp = [16	32	48	64	80	96	112	128	144	160	176	192	208	224	240	255];
BFS = [1.21	2.43	3.64	4.86	6.07	7.29	8.5	9.72	10.93	12.15	13.36	14.58	15.79	17.01	18.22	19.44];
rpm = [ 400
800
1200
1600
2000
2400
2800
3200
3600
4000
4400
4800
5200
5600
6000
6400];




%% Format string for each line of text:

formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Allocate imported array to column variable names
Time1 = dataArray{:, 1};
AFCORRB3 = dataArray{:, 2};
AFCORRB4 = dataArray{:, 3};

AFRWBB3 = dataArray{:, 4};
AFRWBB4 = dataArray{:, 5};
BFUELSCHDLms1 = dataArray{:, 6};
BaseFuelSchedule1 = dataArray{:, 7};

EngineSpeed1 = dataArray{:, 7};
FuelCompensationXTrace1 = dataArray{:, 8};

IGNTIMINGBTDC1 = dataArray{:, 9};
INJDUTY1 = dataArray{:, 10};
INTAKEAIRTMP1 = dataArray{:, 11};

KNOCKSTRENGTH1 = dataArray{:, 12};
MASAFB1V1 = dataArray{:, 13};
TARGETAFR1 = dataArray{:, 14};


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

n = length(Time1);
CORR = zeros(n,1);

%% generate corrections matrix
for i=1:n;
    %calculate average correction factor
    if TARGETAFR1(i)==30;   %ignore correction if throttle is closed
        AVGCORR = 1;
    else
    AVGCORR = ((AFCORRB3(i)+AFCORRB4(i))/2)/100;
    end
    if AVGCORR > 1.06;  %limit correction to 6%
        AVGCORR = 1.06;
    else
        AVGCORR = AVGCORR;
    end
    if AVGCORR < 0.94;  %limit correction to 6%
        AVGCORR = 0.94;
    else
        AVGCORR = AVGCORR;
    end
    
   %Calculate average AFR correction from target AFR vs. WBo2
        if TARGETAFR1(i)==30;   %ignore correction if throttle is closed
        AFRCORR = 1;
        else 
        AFRCORR = (AFRWBB3(i)+AFRWBB4(i))*0.5/TARGETAFR1(i);
        end
    if AFRCORR > 1.06;
        AFRCORR = 1.06;
    else
        AFRCORR = AFRCORR;
    end
    if AFRCORR < 0.94;
        AFRCORR = 0.94;
    else
        AFRCORR = AFRCORR;
    end
        
        if AFCORRB3(i)==100 %use correction factors if closed loop, AFR values if open loop
            CORR(i) = AFRCORR;
        else
            CORR(i) = AVGCORR;
        end
end
    
%% Loop through MAF data
m = length(MAF);
hits = zeros(m,2);
MAFCORR = zeros(m,2);

for i=1:m;
    MAFCORR(i,1)=MAF(i);
    hits(i,1)=MAF(i);
    for j=1:n
    if (MAF(i)-0.01)<MASAFB1V1(j); 
        if MASAFB1V1(j)<(MAF(i)+0.01);
            MAFCORR(i,2)=MAFCORR(i,2)+CORR(j);
            hits(i,2)=hits(i,2)+1;
        else
            MAFCORR(i,2)=MAFCORR(i,2);
        hits(i,2)=hits(i,2);
        end
    else
        MAFCORR(i,2)=MAFCORR(i,2);
        hits(i,2)=hits(i,2);
    end
    end
end
for i = 1:m;
    if hits(i,2)==0;
        
MAFCORR(i,2)=MAFCORR(i,2);
    else
        MAFCORR(i,2)=MAFCORR(i,2)/hits(i,2);
    end
    if MAFCORR(i,2)==0;
        MAFCORR(i,2)=1;
    else
    end
end
%MAFCORR

%%
%knock strength
y = length(rpm);
x = length(BFS);
knock = zeros(y+1,x+1);
hits = zeros(y+1,x+1);
%% fill in axes
for i=1:y;
    knock(i+1,1)=rpm(i);
end
for i=1:x;
    knock(1,i+1)=BFS(i);
end

%% loop through knock data
for i = 2:x;
    for j = 2:y;
        for k = 1:n;
            if (BFS(i-1)-0.2)<BaseFuelSchedule1(k);
                if BaseFuelSchedule1(k)< (BFS(i-1)+0.2);
                    if (rpm(j-1)-200)<EngineSpeed1(k);
                        if EngineSpeed1(k)<(rpm(j-1)+200);
                            knock(i,j)=knock(i,j)+ KNOCKSTRENGTH1(k);
                           
                        if KNOCKSTRENGTH1(k) > knock(i,j);
                            knock(i,j)=KNOCKSTRENGTH1(k);
                            else
                                knock(i,j)=knock(i,j);
                            end
                        else
                        end
                    else
                    end
                else
                end           
            else
            end
        end
    end
end

%% ignition timing
timing = zeros(y+1,x+1);
hits = zeros(y+1,x+1);
%% fill in axes
for i=1:y;
    timing(i+1,1)=rpm(i);
end
for i=1:x;
    timing(1,i+1)=BFS(i);
end

%% loop through timing data

for i = 2:x;
    for j = 2:y;
        for k = 1:n;
            if (BFS(i-1)-0.2)<BaseFuelSchedule1(k);
                if BaseFuelSchedule1(k)< (BFS(i-1)+0.2);
                    if (rpm(j-1)-200)<EngineSpeed1(k);
                        if EngineSpeed1(k)<(rpm(j-1)+200);
                        timing(i,j)=timing(i,j)+IGNTIMINGBTDC1(k);
                        hits(i,j)=hits(i,j)+1;
                        else
                        end
                    else
                    end
                else
                end           
            else
            end
        end
    end
end
for i = 2:x;
    for j = 2:y;
        if hits(i,j)==0;
            hits(i,j)=1;
        else
        end
        timing(i,j)=round(timing(i,j)/hits(i,j),1);
    end
end
%%
%% loop through fuel comp data
fuelcomp = zeros(y+1,x+1);
fuelhits = zeros(y+1,x+1);

for i=1:y;
    fuelcomp(i+1,1)=rpm(i);
end
for i=1:x;
    fuelcomp(1,i+1)=fcomp(i);
end

for i = 2:x;
    for j = 2:y;
        for k = 1:n;
            if (fcomp(i-1)-5)<FuelCompensationXTrace1(k);
                if FuelCompensationXTrace1(k)< (fcomp(i-1)+5);
                    if (rpm(j-1)-150)<EngineSpeed1(k);
                        if EngineSpeed1(k)<(rpm(j-1)+150);
                        fuelcomp(i,j)=fuelcomp(i,j)+CORR(k)*100;
                        fuelhits(i,j)=fuelhits(i,j)+1;
                        else
                        end
                    else
                    end
                else
                end           
            else
            end
        end
    end
end
for i = 2:x+1;
    for j = 2:y+1;
        if fuelhits(i,j)==0;
            fuelhits(i,j)=1;
        else
        end
        if fuelcomp(i,j)==0;
            fuelcomp(i,j) = 100;
        else
        end
        fuelcomp(i,j)=round(fuelcomp(i,j)/fuelhits(i,j),1);
    end
end
%%
%injector duty cycle
%% loop through duty cycle data
IDC = zeros(y+1,x+1);
hits = zeros(y+1,x+1);

for i=1:y;
    IDC(i+1,1)=rpm(i);
end
for i=1:x;
    IDC(1,i+1)=BFS(i);
end

for i = 2:x;
    for j = 2:y;
        for k = 1:n;
            if (BFS(i-1)-0.15)<BaseFuelSchedule1(k);
                if BaseFuelSchedule1(k)< (BFS(i-1)+0.15);
                    if (rpm(j-1)-150)<EngineSpeed1(k);
                        if EngineSpeed1(k)<(rpm(j-1)+150);
                        IDC(i,j)=IDC(i,j)+INJDUTY1(k);
                        hits(i,j)=hits(i,j)+1;
                        else
                        end
                    else
                    end
                else
                end           
            else
            end
        end
    end
end
for i = 2:x;
    for j = 2:y;
        if hits(i,j)==0;
            hits(i,j)=1;
        else
        end
        IDC(i,j)=round(IDC(i,j)/hits(i,j),1);
    end
end
%% MAXIMUM ignition timing the ECU ran for given cells
MAXtiming = zeros(y+1,x+1);

%% fill in axes
for i=1:y;
    MAXtiming(i+1,1)=rpm(i);
end
for i=1:x;
    MAXtiming(1,i+1)=BFS(i);
end

%% loop through timing data

for i = 2:x;
    for j = 2:y;
        for k = 1:n;
            if (BFS(i-1)-0.2)<BaseFuelSchedule1(k);
                if BaseFuelSchedule1(k)< (BFS(i-1)+0.2);
                    if (rpm(j-1)-200)<EngineSpeed1(k);
                        if EngineSpeed1(k)<(rpm(j-1)+200);
                            if IGNTIMINGBTDC1(k) > MAXtiming(i,j);
                            MAXtiming(i,j)=IGNTIMINGBTDC1(k);
                            else
                                MAXtiming(i,j)=MAXtiming(i,j);
                            end
                       
                        else
                        end
                    else
                    end
                else
                end           
            else
            end
        end
    end
end

%% Clean up variables from memory, only save useful tables
clear AFCORRB3; 
clear AFCORRB4;
clear AFRCORR;
clear AFRWBB3;
clear AFRWBB4; 
clear AVGCORR;
clear BaseFuelSchedule1;
clear BFS; 
clear BFUELSCHDLms1; 
clear CORR;
clear EngineSpeed1;
clear fcomp;
clear FuelCompensationXTrace1;
clear i;
clear IGNTIMINGBTDC1;
clear INJDUTY1;
clear INTAKEAIRTMP1;
clear KNOCKSTRENGTH1;
clear j;
clear k;
clear m
clear n;
clear x;
clear y;
clear MAF;
clear MASAFB1V1; 
clear rpm;
clear TARGETAFR1; 
clear Time1;